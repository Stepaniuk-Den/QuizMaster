{"version":3,"file":"static/js/698.42538f3d.chunk.js","mappings":"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","sources":["modules/quizPage/QuizQuestion/QuizQuestionStyled.js","modules/quizPage/QuizQuestion/QuizQuestion.jsx","modules/quizPage/AnswerList/AnswerList.jsx"],"sourcesContent":["import styled from \"styled-components\";\nimport isPropValid from \"@emotion/is-prop-valid\";\n\n// export const = styled\nexport const TitleQuestion = styled.h2`\n  color: var(--text-color-100);\n  font-size: 24px;\n\n  font-weight: 700;\n  line-height: 32px;\n  letter-spacing: -0.24px;\n  margin-bottom: 40px;\n`;\n\nexport const NextButton = styled.button`\n  padding: 16px 62px;\n  border-radius: 30px;\n  background: var(--blue-background);\n\n  font-style: normal;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 16px;\n  letter-spacing: -0.01em;\n\n  color: var(--text-color-100);\n\n  &:disabled {\n    color: rgba(244, 244, 244, 0.2);\n    cursor: not-allowed;\n  }\n`;\n\nexport const AnswersContainer = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n  margin-top: 16px;\n`;\n\nexport const ButtonText = styled.p`\n  color: var(--text-color-100);\n  font-size: 16px;\n  line-height: 16px;\n  letter-spacing: -0.01em;\n`;\n\nexport const AnswerLabels = styled.span`\n  font-style: normal;\n  font-weight: 700;\n`;\n\nexport const BackButton = styled.button`\n  background: none;\n  border: none;\n  color: white;\n  cursor: pointer;\n  margin-left: 14px;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 16px;\n  letter-spacing: -0.01em;\n  color: var(--text-color-100);\n  border-bottom: 2px solid var(--text-color-100);\n  &:disabled {\n    color: rgba(244, 244, 244, 0.2);\n    border-bottom: 2px solid rgba(244, 244, 244, 0.2);\n    cursor: not-allowed;\n  }\n`;\n\nexport const DownContainer = styled.div`\n  position: relative;\n  margin-top: 40px;\n`;\n\nexport const AnswersCounter = styled.p`\n  position: absolute;\n  text-align: \"right\";\n  bottom: 0;\n  right: 0;\n  margin: 0;\n`;\n\nexport const StyledButton = styled.button.withConfig({\n  shouldForwardProp: (prop) => isPropValid(prop),\n})`\n  width: 295px;\n  @media (min-width: 768px) {\n    width: 222px;\n  }\n\n  text-align: left;\n  padding: 14px 0 14px 18px;\n  border-radius: 30px;\n  border: 1px solid\n    ${(props) =>\n      props.isCorrect === \"correct\"\n        ? \"green\"\n        : props.isCorrect === \"incorrect\"\n        ? \"red\"\n        : \"rgba(244, 244, 244, 0.6)\"};\n  cursor: pointer;\n  background-color: ${(props) =>\n    props.isCorrect === \"correct\"\n      ? \"rgba(29, 236, 18, 0.25)\"\n      : props.isCorrect === \"incorrect\"\n      ? \"rgba(255, 0, 0, 0.2)\"\n      : \"transparent\"};\n  color: ${(props) =>\n    props.isCorrect === \"correct\"\n      ? \"white\"\n      : props.isCorrect === \"incorrect\"\n      ? \"white\"\n      : \"black\"};\n`;\n\nexport const QuizeBox = styled.div`\n  width: 335px;\n  background-color: var(--second-background);\n  padding: 40px 20px;\n  border-radius: 20px;\n  @media (min-width: 768px) {\n    width: 580px;\n    background-color: var(--second-background);\n    padding: 60px;\n    border-radius: 20px;\n  }\n`;\n\nexport const TimeText = styled.p`\n  font-style: normal;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 16px;\n  letter-spacing: -0.01em;\n  color: rgba(244, 244, 244, 0.6);\n`;\n\nexport const StyledCountdown = styled.span`\n  font-style: normal;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 16px;\n  letter-spacing: -0.01em;\n  color: #f4f4f4;\n  margin-left: 8px;\n`;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  NextButton,\n  BackButton,\n  StyledButton,\n  TitleQuestion,\n  AnswersContainer,\n  ButtonText,\n  DownContainer,\n  AnswersCounter,\n  AnswerLabels,\n  QuizeBox,\n  StyledCountdown,\n  TimeText,\n} from \"./QuizQuestionStyled\";\nimport { useLocation, useNavigate } from \"react-router\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  getPassedQuizzesThunk,\n  passedUsersQuiz,\n  updateQuizThunk,\n  updateUsersQuiz,\n} from \"../../../redux/quiz/quizThunks\";\nimport { useAuth } from \"../../../hooks/useAuth\";\n\nfunction QuizQuestion({ questions, quizId }) {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const answerLabels = [\"A\", \"C\", \"B\", \"D\"];\n  const [correctAnswersCount, setCorrectAnswersCount] = useState(0);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [previousQuestion, setPreviousQuestion] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(false);\n  const [isAnswerSelected, setIsAnswerSelected] = useState(false);\n  const [userAnswers, setUserAnswers] = useState({});\n  const searchParams = new URLSearchParams(location.search);\n  const inputValue = searchParams.get(\"inputValue\");\n\n  const answers = questions[currentQuestion].answers;\n  const question = questions[currentQuestion];\n  const { isAuth } = useAuth();\n\n  const handleButtonClick = (answer, index) => {\n    const isCorrect = answer.correctAnswer;\n\n    setIsAnswerSelected(true);\n\n    setSelectedAnswer(true);\n\n    setUserAnswers((prevAnswers) => {\n      const questionId = questions[currentQuestion]._id;\n\n      return {\n        ...prevAnswers,\n        [questionId]: {\n          true: answers.findIndex((ans) => ans.correctAnswer === true),\n          false: !isCorrect\n            ? index\n            : answer.correctAnswer\n            ? index\n            : prevAnswers[questionId]?.false,\n          time: timeRemaining,\n        },\n      };\n    });\n\n    if (isCorrect) {\n      setCorrectAnswersCount((prevCount) => prevCount + 1);\n    }\n  };\n\n  const handleNextQuestion = () => {\n    if (currentQuestion < questions.length - 1) {\n      setSelectedAnswer(false);\n      setIsAnswerSelected(false);\n      setPreviousQuestion(currentQuestion);\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      navigate(\n        `/quiz/${quizId}/quizresult?correctAnswersCount=${correctAnswersCount}&totalQuestions=${questions.length}&inputValue=${inputValue}`\n      );\n\n      const quizData = {\n        result: {\n          quizId: quizId,\n          quantityQuestions: questions.length,\n          correctAnswers: correctAnswersCount,\n        },\n      };\n\n      dispatch(updateQuizThunk(quizId));\n      if (isAuth) {\n        dispatch(getPassedQuizzesThunk()).then((arr) => {\n          const totalPassed = arr.payload;\n          if (totalPassed.length === 0) {\n            dispatch(passedUsersQuiz(quizData));\n          } else if (totalPassed && totalPassed.data.some((item) => item._id === quizData.result.quizId)) {\n            dispatch(updateUsersQuiz(quizData));\n          } else {\n            dispatch(passedUsersQuiz(quizData));\n          }\n        });\n      }\n    }\n  };\n\n  const handlePreviousQuestion = () => {\n    if (previousQuestion !== null) {\n      setSelectedAnswer(true);\n      setIsAnswerSelected(false);\n      setCurrentQuestion(previousQuestion);\n      setPreviousQuestion(previousQuestion - 1);\n\n      const prevQuestionId = questions[previousQuestion]._id;\n      const prevUserAnswer = userAnswers[prevQuestionId];\n\n      if (prevUserAnswer && prevUserAnswer.time) {\n        setTimeRemaining(prevUserAnswer.time);\n          setSelectedAnswer(true);\n      } else {\n        setTimeRemaining(question.time);\n      }\n    }\n  };\n\n  const isAnswerTrue = userAnswers[questions[currentQuestion]._id]?.true;\n  const isAnswerFalse = userAnswers[questions[currentQuestion]._id]?.false;\n\n  const getButtonClass = (index) => {\n    if (index === isAnswerTrue && index === isAnswerFalse) {\n      return \"correct\";\n    } else if (index === isAnswerTrue) {\n      return \"correct\";\n    } else if (Array.isArray(isAnswerFalse)) {\n      if (isAnswerFalse.includes(index)) {\n        return \"incorrect\"\n      }\n    } else if(index === isAnswerFalse){\n        return \"incorrect\"\n      }\n     else {\n      return \"normal\";\n    }\n  };\n\n  const [timeRemaining, setTimeRemaining] = useState(question.time);\n\n  const formatTime = (timeInSeconds) => {\n    const minutes = Math.floor(timeInSeconds / 60);\n    const seconds = timeInSeconds % 60;\n    return `${String(minutes).padStart(2, \"0\")}:${String(seconds).padStart(\n      2,\n      \"0\"\n    )}`;\n  };\n\n useEffect(() => {\n  setTimeRemaining(question.time);\n}, [question, currentQuestion]);\n\nuseEffect(() => {\n  let timer;\n  if (!isAnswerSelected && timeRemaining > 0) {\n    timer = setTimeout(() => {\n      setTimeRemaining((prevTime) => prevTime - 1);\n    }, 1000);\n  } else if (timeRemaining === 0 && !isAnswerSelected) {\n    setTimeRemaining(null)\n    setUserAnswers((prevAnswers) => {\n      const questionId = questions[currentQuestion]._id;\nconst falseIndexes = answers\n        .map((elem, index) => (elem.correctAnswer === false ? index : null))\n        .filter((index) => index !== null);\n\n      return {\n        ...prevAnswers,\n        [questionId]: {\n          true: answers.findIndex((ans) => ans.correctAnswer === true),\n          false: falseIndexes,\n          time: timeRemaining,\n        },\n      }\n    });\n  }\n\n  if (isAnswerSelected) {\n    clearTimeout(timer);\n  } \n\n  return () => {\n    clearTimeout(timer);\n  };\n}, [question, currentQuestion, isAnswerSelected, timeRemaining, questions, answers]);\n\n\n  return (\n    <>\n      <QuizeBox>\n        <TitleQuestion>{questions[currentQuestion].question}</TitleQuestion>\n        <TimeText>\n          Time:\n          <StyledCountdown>\n            <span>\n              {userAnswers[questions[currentQuestion]._id]\n                ? formatTime(userAnswers[questions[currentQuestion]._id].time)\n                : formatTime(timeRemaining)}\n            </span>\n          </StyledCountdown>\n        </TimeText>\n        <div>\n          <AnswersContainer>\n            {answers.map((answer, index) => (\n              <li key={index}>\n                <StyledButton\n                  onClick={() => handleButtonClick(answer, index)}\n                  isCorrect={getButtonClass(index)}\n                  disabled={userAnswers[questions[currentQuestion]._id]}\n                >\n                  <ButtonText>\n                    <AnswerLabels>{answerLabels[index]} : </AnswerLabels>\n                    {`${answer.answer}`}\n                  </ButtonText>\n                </StyledButton>\n              </li>\n            ))}\n          </AnswersContainer>\n        </div>\n        <DownContainer>\n          <AnswersCounter>\n            {currentQuestion + 1}/{questions.length}\n          </AnswersCounter>\n          <NextButton\n            onClick={handleNextQuestion}\n            disabled={!selectedAnswer && !userAnswers[questions[currentQuestion]._id]}\n          >\n            Next\n          </NextButton>\n          {currentQuestion > 0 && (\n            <BackButton onClick={handlePreviousQuestion}\n              disabled={!selectedAnswer && !userAnswers[questions[currentQuestion]._id]}\n            >Back</BackButton>\n          )}\n        </DownContainer>\n      </QuizeBox>\n    </>\n  );\n}\n\nexport default QuizQuestion;\n","import { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { getQuizThunk } from \"../../../redux/quiz/quizThunks\";\nimport QuizQuestion from \"../QuizQuestion\";\n\nconst AnswerList = () => {\n  const { quizId } = useParams();\n  const dispatch = useDispatch();\n  const [quizData, setQuizData] = useState([]);\n\n  useEffect(() => {\n    dispatch(getQuizThunk(quizId)).then((data) => {\n      setQuizData(data.payload.questions);\n    });\n  }, [dispatch, quizId]);\n\n  return (\n    <div>\n      {quizData.length > 0 && (\n        <QuizQuestion questions={quizData} quizId={quizId} />\n      )}\n    </div>\n  );\n};\n\nexport default AnswerList;\n"],"names":["TitleQuestion","styled","h2","_templateObject","_taggedTemplateLiteral","NextButton","button","_templateObject2","AnswersContainer","ul","_templateObject3","ButtonText","p","_templateObject4","AnswerLabels","span","_templateObject5","BackButton","_templateObject6","DownContainer","div","_templateObject7","AnswersCounter","_templateObject8","StyledButton","withConfig","shouldForwardProp","prop","isPropValid","_templateObject9","props","isCorrect","QuizeBox","_templateObject10","TimeText","_templateObject11","StyledCountdown","_templateObject12","_ref","_userAnswers$question","_userAnswers$question2","questions","quizId","navigate","useNavigate","dispatch","useDispatch","location","useLocation","answerLabels","_useState","useState","_useState2","_slicedToArray","correctAnswersCount","setCorrectAnswersCount","_useState3","_useState4","currentQuestion","setCurrentQuestion","_useState5","_useState6","previousQuestion","setPreviousQuestion","_useState7","_useState8","selectedAnswer","setSelectedAnswer","_useState9","_useState10","isAnswerSelected","setIsAnswerSelected","_useState11","_useState12","userAnswers","setUserAnswers","inputValue","URLSearchParams","search","get","answers","question","isAuth","useAuth","isAnswerTrue","_id","true","isAnswerFalse","false","getButtonClass","index","Array","isArray","includes","_useState13","time","_useState14","timeRemaining","setTimeRemaining","formatTime","timeInSeconds","minutes","Math","floor","seconds","concat","String","padStart","useEffect","timer","setTimeout","prevTime","prevAnswers","questionId","falseIndexes","map","elem","correctAnswer","filter","_objectSpread","_defineProperty","findIndex","ans","clearTimeout","_jsx","_Fragment","children","_jsxs","answer","onClick","_prevAnswers$question","prevCount","handleButtonClick","disabled","length","quizData","result","quantityQuestions","correctAnswers","updateQuizThunk","getPassedQuizzesThunk","then","arr","totalPassed","payload","passedUsersQuiz","data","some","item","updateUsersQuiz","prevQuestionId","prevUserAnswer","useParams","setQuizData","getQuizThunk","QuizQuestion"],"sourceRoot":""}