{"version":3,"file":"static/js/724.49162c1e.chunk.js","mappings":"qPAKaA,EAAWC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yVAkBrBC,EAAeJ,EAAAA,GAAOK,GAAEC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,wOAaxBI,EAAcP,EAAAA,GAAOQ,EAACC,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,gKAUtBO,EAAiBV,EAAAA,GAAOQ,EAACG,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,wOAazBS,GAAqBZ,EAAAA,EAAAA,IAAOa,EAAAA,GAAPb,CAAYc,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,2lBA+BjCY,EAAYf,EAAAA,GAAOC,IAAGe,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,uCAKtBc,GAAUjB,EAAAA,EAAAA,IAAOkB,EAAAA,EAAPlB,CAAe,CACpC,0BAA2B,CACzBmB,MAAO,yBAGT,yBAA0B,CACxBA,MAAO,yBAmBEC,EAAYpB,EAAAA,GAAOqB,OAAMC,IAAAA,GAAAnB,EAAAA,EAAAA,GAAA,qWAqBzBoB,GAAkBvB,EAAAA,EAAAA,IAAOwB,EAAAA,IAAPxB,CAAsByB,IAAAA,GAAAtB,EAAAA,EAAAA,GAAA,iK,2DC9DrD,EA3DmB,WAAO,IAADuB,EACjBC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,EAAe,IAAIC,gBAAgBH,EAASI,QAC5CC,EAAsBH,EAAaI,IAAI,uBACvCC,EAAiBL,EAAaI,IAAI,kBAClCE,EAAaN,EAAaI,IAAI,cAC5BG,GAAWC,EAAAA,EAAAA,MAAXD,OACRE,GAA0BC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAChBI,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,QAAqB,QAAfvB,EAACG,EAASqB,aAAK,IAAAxB,OAAA,EAAdA,EAAgByB,MAgBxC,OACEC,EAAAA,EAAAA,MAACrD,EAAQ,CAAAsD,SAAA,EACPC,EAAAA,EAAAA,KAAClC,EAAS,CAACmC,KAAK,SAASC,QAAS,kBAhBV,SAACZ,GASnB,IAADa,EARHb,EAAQ,EACVjB,GAAS+B,EAAAA,EAAAA,IAAsB,CAAEpB,OAAAA,EAAQqB,KAAMf,KAAUgB,MAAK,WAAO,IAADC,GAClEC,EAAAA,EAAAA,MACAhB,EAAyB,QAAjBe,EAACb,EAASe,eAAO,IAAAF,EAAAA,EAAI,IAC/B,IAKAf,EAAyB,QAAjBW,EAACT,EAASe,eAAO,IAAAN,EAAAA,EAAI,IAEjC,CAI4CO,CAAoBpB,EAAM,EAACS,UACjEC,EAAAA,EAAAA,KAAC/B,EAAe,OAElB+B,EAAAA,EAAAA,KAAClD,EAAY,CAAAiD,SAAC,iBACdC,EAAAA,EAAAA,KAAC/C,EAAW,CAAA8C,SAAC,qBACbD,EAAAA,EAAAA,MAAC1C,EAAc,CAAA2C,SAAA,CACZnB,EAAoB,IAAEE,MAGzBkB,EAAAA,EAAAA,KAAC/C,EAAW,CAAA8C,SAAC,mBACbC,EAAAA,EAAAA,KAACvC,EAAS,CAAAsC,UACRC,EAAAA,EAAAA,KAACrC,EAAO,CACNgD,KAAK,oBACLrB,MAAOA,EAEPsB,SAAU,SAACC,EAAGC,GACZvB,EAASuB,EACX,EACAC,WAAWf,EAAAA,EAAAA,KAACgB,EAAAA,EAAQ,SAIxBhB,EAAAA,EAAAA,KAAC1C,EAAkB,CACjB2D,GAAE,SAAAC,OAAWlC,EAAM,6BAAAkC,OAA4BnC,GAAagB,SAC7D,qBAKP,C","sources":["modules/quizPage/QuizResult/QuizResultStyled.js","modules/quizPage/QuizResult/QuizResult.jsx"],"sourcesContent":["import styled from \"styled-components\";\nimport { Rating } from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\nimport { AiOutlineClose } from \"react-icons/ai\";\n\nexport const QuizeBox = styled.div`\n  position: relative;\n  max-width: 580px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  align-items: center;\n  padding: 60px;\n  background-color: var(--blue-background);\n  border-radius: 20px;\n\n  @media screen and (max-width: 768px) {\n    max-width: 335px;\n    padding: 80px;\n  }\n`;\n\nexport const ResultTitleS = styled.h2`\n  margin-bottom: 32px;\n  font-size: 24px;\n  font-family: \"GilroyBold\";\n  line-height: 1.1;\n  color: var(--text-color-100);\n\n  @media screen and (max-width: 768px) {\n    font-size: 20px;\n    line-height: 1.4;\n  }\n`;\n\nexport const ResultTextS = styled.p`\n  margin-bottom: 12px;\n  color: var(--text-color-60);\n\n  @media screen and (max-width: 768px) {\n    font-size: 14px;\n    line-height: 1.1;\n  }\n`;\n\nexport const AnswersResultS = styled.p`\n  margin-bottom: 32px;\n  font-size: 24px;\n  font-family: \"GilroyBold\";\n  line-height: 1.3;\n  color: var(--text-color-100);\n\n  @media screen and (max-width: 768px) {\n    font-size: 20px;\n    line-height: 1.4;\n  }\n`;\n\nexport const BtnWriteReviewLink = styled(Link)`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 75px;\n  max-width: 169px;\n  width: 100%;\n  height: 48px;\n  font-family: \"GilroyBold\";\n  border: 1px solid var(--text-color-60);\n  border-radius: 30px;\n  background: transparent;\n  color: var(--text-color-100);\n  transform: scale(1);\n  transition: transform 250ms linear;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.1);\n  }\n\n  @media screen and (max-width: 768px) {\n    margin-top: 32px;\n    max-width: 156px;\n    font-size: 14px;\n    line-height: 1.1;\n  }\n`;\n\n\nexport const RatingBox = styled.div`\n  margin: 0;\n  padding: 0;\n`;\n\nexport const RatingS = styled(Rating)({\n  \"& .MuiRating-iconFilled\": {\n    color: \"var(--star-color-100)\",\n    // size: \"large\",\n  },\n  \"& .MuiRating-iconEmpty\": {\n    color: \"var(--star-color-8)\",\n    // size: \"large\",\n  },\n  // \"& .MuiRating-iconHover\": {\n  //   color: \"var(--star-color-8)\",\n  //   // size: \"large\",\n  // },\n  // \"& . MuiRating-iconSize\": {\n  //   size:\"large\",\n  // }\n\n  // .MuiRating-sizeLarge\n  // .MuiRating-icon\n  // \"& .emptyIcon\": {\n  //   fontSize: \"large\",\n  // }\n});\n\n\nexport const BtnCloseS = styled.button`\n  position: absolute;\n  top: 24px;\n  right: 24px;\n  width: 28px;\n  height: 28px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n\n  @media screen and (max-width: 768px) {\n    width: 24px;\n    height: 24px;\n    top: 16px;\n    right: 16px;\n  }\n`;\n\nexport const AiOutlineCloseS = styled(AiOutlineClose)`\n  width: 28px;\n  height: 28px;\n  fill: var(--text-color-100);\n\n  @media screen and (max-width: 768px) {\n    width: 24px;\n    height: 24px;\n  }\n`;\n","import React, { useRef, useState } from \"react\";\nimport {\n  AiOutlineCloseS,\n  AnswersResultS,\n  BtnCloseS,\n  BtnWriteReviewLink,\n  QuizeBox,\n  RatingBox,\n  RatingS,\n  ResultTextS,\n  ResultTitleS,\n} from \"./QuizResultStyled\";\nimport { useLocation } from \"react-router\";\nimport { useDispatch } from \"react-redux\";\nimport { createReviewQuizThunk } from \"../../../redux/feedback/feedbackThunks\";\nimport StarIcon from \"@mui/icons-material/Star\";\nimport { notifyRateAddSuccess } from \"../../../shared/NotificationToastify/Toasts\";\nimport { useNavigate } from \"react-router\";\nimport { useParams } from \"react-router-dom\";\n\nconst QuizResult = () => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const correctAnswersCount = searchParams.get(\"correctAnswersCount\");\n  const totalQuestions = searchParams.get(\"totalQuestions\");\n  const inputValue = searchParams.get(\"inputValue\");\n  const { quizId } = useParams();\n  const [value, setValue] = useState(0);\n  const navigate = useNavigate();\n  const backLink = useRef(location.state?.from);\n\n  const handleClickBtnClose = (value) => {\n    if (value > 0) {\n      dispatch(createReviewQuizThunk({ quizId, rate: value })).then(() => {\n        notifyRateAddSuccess();\n        navigate(backLink.current ?? \"/\");\n      });\n      // .catch((error) => {\n      //   notifyError(error);\n      // });\n    } else {\n      navigate(backLink.current ?? \"/\");\n    }\n  };\n\n  return (\n    <QuizeBox>\n      <BtnCloseS type=\"submit\" onClick={() => handleClickBtnClose(value)}>\n        <AiOutlineCloseS />\n      </BtnCloseS>\n      <ResultTitleS>The results</ResultTitleS>\n      <ResultTextS>Correct answers</ResultTextS>\n      <AnswersResultS>\n        {correctAnswersCount}/{totalQuestions}\n      </AnswersResultS>\n\n      <ResultTextS>Rate the quiz</ResultTextS>\n      <RatingBox>\n        <RatingS\n          name=\"simple-controlled\"\n          value={value}\n          // size=\"large\"\n          onChange={(_, newValue) => {\n            setValue(newValue);\n          }}\n          emptyIcon={<StarIcon />}\n        />\n      </RatingBox>\n\n      <BtnWriteReviewLink\n        to={`/quiz/${quizId}/quizfeedback?inputValue=${inputValue}`}\n      >\n        Write a review\n      </BtnWriteReviewLink>\n    </QuizeBox>\n  );\n};\n\nexport default QuizResult;\n"],"names":["QuizeBox","styled","div","_templateObject","_taggedTemplateLiteral","ResultTitleS","h2","_templateObject2","ResultTextS","p","_templateObject3","AnswersResultS","_templateObject4","BtnWriteReviewLink","Link","_templateObject5","RatingBox","_templateObject6","RatingS","Rating","color","BtnCloseS","button","_templateObject7","AiOutlineCloseS","AiOutlineClose","_templateObject8","_location$state","dispatch","useDispatch","location","useLocation","searchParams","URLSearchParams","search","correctAnswersCount","get","totalQuestions","inputValue","quizId","useParams","_useState","useState","_useState2","_slicedToArray","value","setValue","navigate","useNavigate","backLink","useRef","state","from","_jsxs","children","_jsx","type","onClick","_backLink$current2","createReviewQuizThunk","rate","then","_backLink$current","notifyRateAddSuccess","current","handleClickBtnClose","name","onChange","_","newValue","emptyIcon","StarIcon","to","concat"],"sourceRoot":""}